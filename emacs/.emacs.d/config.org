#+title: Emacs Configuration File
#+author: Nicolai Haddal

* Package management
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** General
#+begin_src emacs-lisp
  (use-package general
    :ensure t)
#+end_src
* Aliases
** Yes/Or/No
   Simple y/or/n substiution for yes/or/no prompts
#+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Completion
** Vertico
#+begin_src emacs-lisp
  (use-package vertico)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

(vertico-mode)  
#+end_src
** Orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
	   ("M-s c" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)
    ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
)
  (global-corfu-mode)
  (add-to-list 'load-path "~/.emacs.d/elpa/corfu-20231208.706/corfu-info.el")

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src
** Cape
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("M-p p" . completion-at-point) ;; capf
	   ("M-p t" . complete-tag)        ;; etags
	   ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
	   ("M-p h" . cape-history)
	   ("M-p f" . cape-file)
	   ("M-p k" . cape-keyword)
	   ("M-p s" . cape-elisp-symbol)
	   ("M-p e" . cape-elisp-block)
	   ("M-p a" . cape-abbrev)
	   ("M-p l" . cape-line)
	   ("M-p w" . cape-dict)
	   ("M-p :" . cape-emoji)
	   ("M-p \\" . cape-tex)
	   ("M-p _" . cape-tex)
	   ("M-p ^" . cape-tex)
	   ("M-p &" . cape-sgml)
	   ("M-p r" . cape-rfc1345)
	   ("M-p y" . yasnippet-capf))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src
** yas/cape integration
#+begin_src emacs-lisp
  (use-package yasnippet-capf
      :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
  
#+end_src
* Visual and quality of life improvements
** No toolbar/menubar/scrollbar
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (set-fringe-mode 10)
     (global-visual-line-mode)
   #+end_src
** Autorefresh dired
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'auto-revert-mode)
   #+end_src
** Space in minibuffer
Don't use the spacebar for auto-completion in the minibuffer.
#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
#+end_src
** Handle backup files
Place backup files in their own directory.
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
       backup-by-copying t  ; don't delink hardlinks
       delete-old-versions t  ; automatically delete excess backups
       )
#+end_src
** Display the time
   #+begin_src emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+end_src
** Inhibit default splashcreen
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src

** Logical scrolling
   More intuitive scrolling behavior when using C+n
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Better sentence navigation
I don't use two spaces between sentences, so M-a/M-e only moves between paragraphs.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Turn off the bell
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** Prettify symbols
   #+begin_src emacs-lisp
     (when window-system(global-prettify-symbols-mode t))
   #+end_src
** Window-splitting
   Custom function for following split windows
   #+begin_src emacs-lisp
     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+end_src
** Subword navigation
   Navigate to first uppercase within words for e.g. camelcase words
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** Ignore case for completion
#+begin_src emacs-lisp
  (setq completion-ignore-case  t)
#+end_src
** electric parentheses
   auto-complete parentheses
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
				    (?\{ . ?\})
				    (?\( . ?\))
				    (?\[ . ?\])
				    (?\" . ?\")
				    ))
     (electric-pair-mode t)
   #+end_src
** diminish
Hide certain minor modes in the status bar.
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :config       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       (diminish 'subword-mode))
   #+end_src
** Line wrapping and word breaking
   #+begin_src emacs-lisp
     (setq org-startup-truncated nil)
   #+end_src
** Which-key
Which-key provides a helpful context menu whenever chords are engaged.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
** Beacon
    Beacon shows you where your cursor is located when you switch to a buffer.
    #+begin_src emacs-lisp
      (use-package beacon
	:ensure t
	:init
	(beacon-mode 1))
    #+end_src
** all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t
       :if (display-graphic-p))

   #+end_src
** Dashboard
   #+begin_src emacs-lisp
	  (use-package dashboard
	    :ensure t
	    :config
	    (dashboard-setup-startup-hook)
	    (setq dashboard-items '((recents . 5)
				    (agenda . 5)
				    (bookmarks . 5)
				    (projects . 5)))
	    (setq dashboard-startup-banner 'official)
	    (setq dashboard-banner-logo-title "Welcome to Emacs!")
	    (setq dashboard-center-content t))
   #+end_src
** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** Zap up to char
It makes much more sense to bind M-z to zap-up-to-char, not zap-to-char! 
#+begin_src emacs-lisp
  (bind-key "M-z" 'zap-up-to-char)
#+end_src
* OS-specific settings
** Mac-specific setings
   Set modifier key.
   #+begin_src emacs-lisp
     (when (eq system-type 'darwin)
       (setq mac-right-option-modifier 'none)
       (setq mac-command-modifier 'meta))
   #+end_src
** WSL
I use Emacs on Windows via WSL2. This means links won't open in my Windows-native default browser; instead, they open in the GUI version under Linux. This fixes that so we can visit links from Emacs directly:
#+begin_src emacs-lisp
  (when (and (eq system-type 'gnu/linux)
	     (string-match
	      "Linux.*Microsoft.*Linux"
	      (shell-command-to-string "uname -a")))
    (setq
     browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
     browse-url-generic-args     '("/c" "start")
     browse-url-browser-function #'browse-url-generic))
#+end_src
** Dired
   Optimized configuration for file management in Emacs.
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :custom
       (when (eq system-type 'darwin)
	 ((insert-directory-program "gls" dired-use-ls-dired t)
		(dired-listing-switches "-agho --group-directories-first")))
       :config
       )
   #+end_src
*** Insert spaces in minibuffer
Don't use SPC to complete candidates in the minibuffer. I.e. space is a space.
#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map " " 'self-insert-command)
#+end_src
* File Management
** Symlinked files
Don't warn for following symlinked files.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Large files
Don't warn for large files.
#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src
* Org-mode
** Global keybindings
   Global keybindings for org-mode for org-store-link, agenda, and capture
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c l") #'org-store-link)
     (global-set-key (kbd "C-c a") #'org-agenda)
     (global-set-key (kbd "C-c c") #'org-capture)
   #+end_src
** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
     '(("p" "Personal templates")
       ("pt" "TODO entry" entry
	(file+headline "~/Dropbox/Notes/personal.org" "Capture")
	(file "~/Dropbox/org/tpl-todo.txt"))
       ("pj" "Journal entry" entry
	(file+olp+datetree "~/Dropbox/org/journal.org")
	"* %U - %^{Activity}")
       ("pg" "Guitar journal entry" entry
	(file+olp+datetree "~/Dropbox/Guitar/guitar_diary.org")
	"* %U - %^{Activity}")
       ("w" "Work templates")
       ("wt" "TODO entry" entry
	(file+headline "~/Dropbox/Notes/work.org" "Capture")
	(file "~/Dropbox/org/tpl-todo.txt"))))
#+end_src
** Multi-state workflow
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO(t)" "WAITING(w)" "REPEATING" "|" "DONE" "DELEGATED")))
   #+end_src
** Timestamps for closed todo items
   #+begin_src emacs-lisp
     (setq org-log-done 'time)
   #+end_src
** Set directory for org-capture
   #+begin_src emacs-lisp
     (setq org-directory "~/Dropbox/Notes")
     (setq org-default-notes-file (concat org-directory "/notes.org"))
   #+end_src
** Org-roam
   #+begin_src emacs-lisp
	  (use-package org-roam
	    :ensure t
	    :custom
	    (org-roam-capture-templates
	     '(("d" "default" plain
		"%?"
		:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
		:unnarrowed t)
	       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
	   :unnarrowed t)
	       ("b" "book notes" plain
	   "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t) 
	       ))
	    :config
	    (setq org-roam-directory (file-truename "~/Dropbox/org-roam"))
	    (org-roam-db-autosync-mode)
	    (add-to-list 'display-buffer-alist
			    '("\\*org-roam\\*"
			      (display-buffer-in-direction)
			      (direction . right)
			      (window-width . 0.33)
			      (window-height . fit-window-to-buffer)))
	    (setq org-roam-mode-section-functions
		     (list #'org-roam-backlinks-section
			   #'org-roam-reflinks-section
			   ;; #'org-roam-unlinked-references-section
			   ))
	    :bind (("C-c n l" . org-roam-buffer-toggle)
		   ("C-c n f" . org-roam-node-find)
		   ("C-c n i" . org-roam-node-insert)
		   ("C-c n c" . org-roam-capture)
		   ("C-c n d" . org-roam-dailies-goto-today)
		   ("C-c n D" . org-roam-dailies-find-date)
		   :map org-mode-map
		   ("C-M-i" . completion-at-point)))
	  ;; If you're using a vertical completion framework, you might want a more informative completion interface
       (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

	  ;; clean up agenda views when using roam files for project management
	  ;; sourced from: https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html
	  ;; thx!
	  (setq org-agenda-prefix-format
		'((agenda . " %i %-12(vulpea-agenda-category)%?-12t% s")
		  (todo . " %i %-12(vulpea-agenda-category) ")
		  (tags . " %i %-12(vulpea-agenda-category) ")
		  (search . " %i %-12(vulpea-agenda-category) ")))
	  (defun vulpea-buffer-prop-get (name)
	    "Get a buffer property called NAME as a string."
	    (org-with-point-at 1
	      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
				       (point-max) t)
		(buffer-substring-no-properties
		 (match-beginning 1)
		 (match-end 1)))))

	  (defun vulpea-agenda-category ()
	    "Get category of item at point for agenda.

	  Category is defined by one of the following items:

	  - CATEGORY property
	  - TITLE keyword
	  - TITLE property
	  - filename without directory and extension

	  Usage example:

	    (setq org-agenda-prefix-format
		  '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

	  Refer to `org-agenda-prefix-format' for more information."
	    (let* ((file-name (when buffer-file-name
				(file-name-sans-extension
				 (file-name-nondirectory buffer-file-name))))
		   (title (vulpea-buffer-prop-get "title"))
		   (category (org-get-category)))
	      (or (if (and
		       title
		       (string-equal category file-name))
		      title
		    category)
		  "")))
	  ;; find project nodes quickly
	  (defun nah-org-roam-node-find-project ()
       (interactive)
       (org-roam-node-find
	nil nil
	(lambda (node)
	  (seq-contains-p (org-roam-node-tags node) "Project"))))
     (global-set-key (kbd "C-c n p") 'my/org-roam-node-find-project)
     (defun nah-org-roam-node-find-project ()
       (interactive)
       (org-roam-node-find
	nil nil
	(lambda (node)
	  (seq-contains-p (org-roam-node-tags node) "Project"))))
   #+end_src
** Set timer sound
   #+begin_src emacs-lisp
	  (setq org-clock-sound "~/Dropbox/yousuffer.wav")
   #+end_src
** Disable todo selection popup
#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection 'expert)
#+end_src
** Custom agenda views
#+begin_src emacs-lisp
  (defun org-focus-private() "Set focus on private things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/personal.org")))
  (defun org-focus-work() "Set focus on work things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/CHN.org")))
  (defun org-focus-all() "Set focus on all things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/personal.org" "~/Dropbox/Notes/CHN.org")))
#+end_src

** Org Babel
Configure Babel for use with Python
#+begin_src emacs-lisp
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src

** Auto bulleted lists
Use more normal behavior for lists in org mode
#+begin_src emacs-lisp
  (use-package org-autolist
    :ensure t
    :hook (org-mode . org-autolist-mode))
#+end_src

** Displaying inline images
Display images inline in org mode using the path to the file in double brackets: [[~/path/to/file]]
Set image width with the following properties:
1. #+ATTR_ORG: :width 100
2. #+ATTR_HTML: width="100px"
We change the variable org-image-actual-width to 'nil' to allow modifying the width of images displayed inline within org mode.
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

** HTMLize
We install this package so org-mode will export HTML files with syntax highlighting within code blocks.
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

* News and word processing tasks
** google translate
   #+begin_src emacs-lisp

     (use-package google-translate
       :ensure t
       :init
       (require 'google-translate)

       :functions (my-google-translate-at-point google-translate--search-tkk)
       :custom
       (google-translate-backend-method 'curl)
       (google-translate-default-source-language "pl")
       (google-translate-default-target-language "en")
       :config
       (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
       (defun my-google-translate-at-point()
	 "reverse translate if prefix"
	 (interactive)
	 (if current-prefix-arg
	     (google-translate-at-point)
	   (google-translate-at-point-reverse)))
       :bind
       ("C-c t". google-translate-at-point)
       ("C-c r". google-translate-at-point-reverse))
   #+end_src
** elfeed
   Read RSS using elfeed.
   #+begin_src emacs-lisp
     (use-package elfeed
       :ensure t
       :config
       (setq elfeed-feeds
	     '(
	       ;;programming
	       ("https://www.reddit.com/r/emacs.rss" emacs)
	       ("https://www.reddit.com/r/localllama.rss" localllama)
	       ("https://www.reddit.com/r/oobabooga.rss" ooba)
	       ))
       (setq-default elfeed-search-filter "@2-days-ago +unread")  
       (setq-default elfeed-search-title-max-width 100)           
       (setq-default elfeed-search-title-min-width 100))

   #+end_src
** read pubs
   #+begin_src emacs-lisp
     (use-package nov
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
   #+end_src
** avy
   #+begin_src emacs-lisp 
     (use-package avy
       :ensure t
       :bind
       ("M-j" . avy-goto-char-timer))
     ;;make avy slightly snappier
     (defcustom avy-timeout-seconds 0.3
       "How many seconds to wait for the second char."
       :type 'float)
   #+end_src
** switch-window
   Better window switching.
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :bind
	 ("C-x o" . 'ace-window))
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
   #+end_src
** hungry-delete
   Hungry delete whitespace
   #+begin_src emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config (global-hungry-delete-mode))
   #+end_src
** sudo-edit
   #+begin_src emacs-lisp
     (use-package sudo-edit
       :ensure t
       )
   #+end_src
** olivetti
   Nice, centered mode for reading text.
   #+begin_src emacs-lisp
     (use-package olivetti
       :ensure t
       )
   #+end_src
* Buffers
** enable ibuffer
   #+begin_src emacs-lisp
     ; (global-set-key (kbd "C-x b") 'ibuffer)
   #+end_src
   
* Custom functions
** config edit/reload
*** edit
   #+begin_src emacs-lisp
     (defun config-visit()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
*** reload
    #+begin_src emacs-lisp
      (defun config-reload ()
	(interactive)
	(org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
      (global-set-key (kbd "C-c C-r") 'config-reload)
    #+end_src
** Yank whole line
   #+begin_src emacs-lisp
     (defun copy-whole-line()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol)))))
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src
   
** Insert elisp in org mode
   #+begin_src emacs-lisp
     (fset 'insertelisporg
	(kmacro-lambda-form [?< ?\C-d ?s tab ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p ?\C-n ?\C-c ?\'] 0 "%d"))
     (global-set-key (kbd "<f8>") 'insertelisporg)
   #+end_src
** Journal time
Enter a journal entry in writeroom mode.
#+begin_src emacs-lisp
    (defun nah-journal-time ()
      "Enter a diary session for the current day."
      (interactive)
      (org-journal-new-entry +1)
      (writeroom-mode)
      (variable-pitch-mode))
#+end_src
* Diary
** Diary directory
  Set a different directory for the diary file.
  #+begin_src emacs-lisp
    (setq diary-file "~/Dropbox/diaryfile.org")
  #+end_src
** Org journal
Use org journal for day-to-day journal entries.
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir "~/Dropbox/org/journal/"
	  org-journal-date-format "%A, %d %B %Y"))
#+end_src
* Word processing
** Flyspell configuration
   Spell-checking with flyspell. Enable for all text modes.
   #+begin_src emacs-lisp
     (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))
     (eval-after-load "flyspell"
       '(progn
	  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
	  (define-key flyspell-mouse-map [mouse-3] #'undefined)))
   #+end_src

** writeroom mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+end_src
** pdf tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+end_src
* Wrap Region
Wrap selection automatically with a quote, parenthesis, curly brackets.
#+begin_src emacs-lisp
  (use-package wrap-region
    :ensure t
    :config
    (wrap-region-mode t))
#+end_src
* Theme
** Modus themes
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
  (use-package ef-themes
    :ensure t)
  (load-theme 'ef-winter t)
#+end_src
** Set font
#+begin_src emacs-lisp
  (when (member "Source Code Pro" (font-family-list))
    (set-frame-font "Source Code Pro-16" t t))
  (set-face-attribute 'default nil :height 200)
#+end_src

* IDE Features
** eglot
Minimal IDE-like features for emacs.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src
** Disable python interpreter warning
#+begin_src emacs-lisp
  (setq python-shell-completion-native-disabled-interpreters '("python"))
#+end_src
** vterm
Let's use a good terminal emulator in emacs!
#+begin_src emacs-lisp
    (use-package vterm
      :ensure t)
#+end_src
** python-venv
#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :ensure t
    :hook ((python-mode . pyvenv-auto-run)))
#+end_src

** evil-mode
#+begin_src emacs-lisp
  ;;; Vim Bindings
  (use-package evil
    :ensure t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu))

   ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))

  ;; emulate the brilliant vim surround plugin
  (use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

** lsp-pyright
For all our python needs
#+begin_src emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;; 			  (require 'lsp-pyright)
  ;; 			  (lsp))))  ; or lsp-deferred

#+end_src

** treesitter
Better syntax highlighting with tree-sitter.
#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :ensure t)

  (use-package tree-sitter
    :ensure t)

  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** Enable wrap-region by default
Allows us to surround text with e.g. quotation marks.
#+begin_src emacs-lisp
  (wrap-region-mode t)
#+end_src
** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)

  ;; We need to install snippets separately
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t)
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** Multiple Cursors
   Select multiple instances of the same selection. Super useful for replacing variables.
   #+begin_src emacs-lisp
     (use-package multiple-cursors
      :ensure t
      :bind
      ("C-q >" . 'mc/mark-next-like-this)
      ("C-q <" . 'mc/mark-previous-like-this)
      ("C-q C-<" . 'mc/mark-all-like-this)
      )
#+end_src
** undo tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
  ;; Prevent undo tree files from polluting your git repo
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

** CSV mode
   #+begin_src emacs-lisp
     (use-package csv-mode
       :ensure t)
   #+end_src
** Flycheck
   Improved syntax checking
   #+begin_src emacs-lisp
	  (use-package flycheck
	    :ensure t
	  )
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** magit
   Git management.
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)

     ;; automagically update the modeline
     ;; this might cause a performance issue
     (setq auto-revert-check-vc-info t)
   #+end_src
** Support for markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "pandoc"))
#+end_src
** god-mode
#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :init (global-set-key (kbd "<escape>") #'god-local-mode))
  ;;(god-mode)
#+end_src
** Astro support
Use emacs with astro.
#+begin_src emacs-lisp
  ;; WEB MODE
  (use-package web-mode
    :ensure t)

  ;; ASTRO
  (define-derived-mode astro-mode web-mode "astro")
  (setq auto-mode-alist
	(append '((".*\\.astro\\'" . astro-mode))
		auto-mode-alist))

  ;; Hook up to eglot
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
		 '(astro-mode . ("astro-ls" "--stdio"
				 :initializationOptions
				 (:typescript (:tsdk "./node_modules/typescript/lib")))))
    :init
    ;; auto start eglot for astro-mode
    (add-hook 'astro-mode-hook 'eglot-ensure))
  ;; (setq auto-mode-alist
  ;;     (append '((".*\\.astro\\'" . js-jsx-mode))
  ;; 	auto-mode-alist))
#+end_src
* hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
  (load "~/.emacs.d/hydras.el")
#+end_src

* Remote access over TRAMP
To ensure a faster experience, disable version control over TRAMP:
#+begin_src emacs-lisp
  (setq vc-ignore-dir-regexp
		       (format "\\(%s\\)\\|\\(%s\\)"
			       vc-ignore-dir-regexp
			       tramp-file-name-regexp))
#+end_src

* Multimedia

**
#+begin_src emacs-lisp
  (use-package empv
    :straight (:host github :repo "isamert/empv.el"))

  (setq empv-invidious-instance "https://vid.puffyan.us/api/v1")

  (add-to-list 'empv-mpv-args "--ytdl-format=best")

  (with-eval-after-load 'embark (empv-embark-initialize-extra-actions))

  (bind-key "C-x m" empv-map)

  (defcustom empv-mpv-args `("--no-terminal" "--idle" ,(concat "--input-ipc-server=" empv-socket-file))
    "Args used while starting mpv.
  This should contain --input-ipc-server=`empv-socket-file', also
  --idle is recommended for keeping your state."
    :type '(repeat (string :tag "Command line option"))
    :group 'empv)
#+end_src
