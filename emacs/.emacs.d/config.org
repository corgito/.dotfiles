#+title: Emacs Configuration File
#+author: Nicolai Haddal
* Aliases
** Yes/Or/No
   Simple y/or/n substiution for yes/or/no prompts
#+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Visual and quality of life improvements
** No toolbar/menubar/scrollbar
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (set-fringe-mode 10)
     (global-visual-line-mode)
   #+end_src
** Autorefresh dired
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'auto-revert-mode)
   #+end_src
** Space in minibuffer
Don't use the spacebar for auto-completion in the minibuffer.
#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
#+end_src
** Handle backup files
Place backup files in their own directory.
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
       backup-by-copying t  ; don't delink hardlinks
       delete-old-versions t  ; automatically delete excess backups
       )
#+end_src
** Display the time
   #+begin_src emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+end_src
** Inhibit default splashcreen
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src

** Logical scrolling
   More intuitive scrolling behavior when using C+n
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Better sentence navigation
I don't use two spaces between sentences, so M-a/M-e only moves between paragraphs.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Turn off the bell
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** Prettify symbols
   #+begin_src emacs-lisp
     (when window-system(global-prettify-symbols-mode t))
   #+end_src
** Window-splitting
   Custom function for following split windows
   #+begin_src emacs-lisp
     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+end_src
** Subword navigation
   Navigate to first uppercase within words for e.g. camelcase words
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** Ignore case for completion
#+begin_src emacs-lisp
  (setq completion-ignore-case  t)
#+end_src
** electric parentheses
   auto-complete parentheses
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
				    (?\{ . ?\})
				    (?\( . ?\))
				    (?\[ . ?\])
				    (?\" . ?\")
				    ))
     (electric-pair-mode t)
   #+end_src
** diminish
Hide certain minor modes in the status bar.
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :config       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       (diminish 'subword-mode))
   #+end_src
** Line wrapping and word breaking
   #+begin_src emacs-lisp
     (setq org-startup-truncated nil)
   #+end_src
** Which-key
Which-key provides a helpful context menu whenever chords are engaged.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
** Beacon
    Beacon shows you where your cursor is located when you switch to a buffer.
    #+begin_src emacs-lisp
      (use-package beacon
	:ensure t
	:init
	(beacon-mode 1))
    #+end_src
** all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t
       :if (display-graphic-p))

   #+end_src
** Dashboard
   #+begin_src emacs-lisp
	  (use-package dashboard
	    :ensure t
	    :config
	    (dashboard-setup-startup-hook)
	    (setq dashboard-items '((recents . 5)
				    (agenda . 5)
				    (bookmarks . 5)
				    (projects . 5)))
	    (setq dashboard-startup-banner 'official)
	    (setq dashboard-banner-logo-title "Welcome to Emacs!")
	    (setq dashboard-center-content t))
   #+end_src
** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
* OS-specific settings
** Mac-specific setings
   Set modifier key.
   #+begin_src emacs-lisp
     (when (eq system-type 'darwin)
       (setq mac-right-option-modifier 'none)
       (setq mac-command-modifier 'meta))
   #+end_src
** WSL
I use Emacs on Windows via WSL2. This means links won't open in my Windows-native default browser; instead, they open in the GUI version under Linux. This fixes that so we can visit links from Emacs directly:
#+begin_src emacs-lisp
  (when (and (eq system-type 'gnu/linux)
	     (string-match
	      "Linux.*Microsoft.*Linux"
	      (shell-command-to-string "uname -a")))
    (setq
     browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
     browse-url-generic-args     '("/c" "start")
     browse-url-browser-function #'browse-url-generic))
#+end_src
** Dired
   Optimized configuration for file management in Emacs.
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :custom
       (when (eq system-type 'darwin)
	 ((insert-directory-program "gls" dired-use-ls-dired t)
		(dired-listing-switches "-agho --group-directories-first")))
       :config
       )
   #+end_src
*** Insert spaces in minibuffer
Don't use SPC to complete candidates in the minibuffer. I.e. space is a space.
#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map " " 'self-insert-command)
#+end_src
* File Management
** Symlinked files
Don't warn for following symlinked files.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Large files
Don't warn for large files.
#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src
* Org-mode
** Global keybindings
   Global keybindings for org-mode for org-store-link, agenda, and capture
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c l") #'org-store-link)
     (global-set-key (kbd "C-c a") #'org-agenda)
     (global-set-key (kbd "C-c c") #'org-capture)
   #+end_src
** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
     '(("p" "Personal templates")
       ("pt" "TODO entry" entry
	(file+headline "~/Dropbox/Notes/personal.org" "Capture")
	(file "~/Dropbox/org/tpl-todo.txt"))
       ("pj" "Journal entry" entry
	(file+olp+datetree "~/Dropbox/org/journal.org")
	"* %U - %^{Activity}")
       ("pg" "Guitar journal entry" entry
	(file+olp+datetree "~/Dropbox/Guitar/guitar_diary.org")
	"* %U - %^{Activity}")
       ("w" "Work templates")
       ("wt" "TODO entry" entry
	(file+headline "~/Dropbox/Notes/work.org" "Capture")
	(file "~/Dropbox/org/tpl-todo.txt"))))
#+end_src
** Multi-state workflow
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO(t)" "WAITING(w)" "REPEATING" "|" "DONE" "DELEGATED")))
   #+end_src
** Timestamps for closed todo items
   #+begin_src emacs-lisp
     (setq org-log-done 'time)
   #+end_src
** Set directory for org-capture
   #+begin_src emacs-lisp
     (setq org-directory "~/Dropbox/Notes")
     (setq org-default-notes-file (concat org-directory "/notes.org"))
   #+end_src
** Org-roam
   #+begin_src emacs-lisp
     (use-package org-roam
       :ensure t
       :config
       (setq org-roam-directory (file-truename "~/Dropbox/org-roam"))
       (org-roam-db-autosync-mode)
       (add-to-list 'display-buffer-alist
		       '("\\*org-roam\\*"
			 (display-buffer-in-direction)
			 (direction . right)
			 (window-width . 0.33)
			 (window-height . fit-window-to-buffer)))
       (setq org-roam-mode-section-functions
		(list #'org-roam-backlinks-section
		      #'org-roam-reflinks-section
		      ;; #'org-roam-unlinked-references-section
		      ))
       :bind (("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n i" . org-roam-node-insert)
	      ("C-c n c" . org-roam-capture)
	      :map org-mode-map
	      ("C-M-i" . completion-at-point)))
   #+end_src
** Set timer sound
   #+begin_src emacs-lisp
	  (setq org-clock-sound "~/Dropbox/yousuffer.wav")
   #+end_src
** Disable todo selection popup
#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection 'expert)
#+end_src
** Custom agenda views
#+begin_src emacs-lisp
  (defun org-focus-private() "Set focus on private things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/personal.org")))
  (defun org-focus-work() "Set focus on work things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/CHN.org")))
  (defun org-focus-all() "Set focus on all things." (interactive)
  (setq org-agenda-files '("~/Dropbox/Notes/personal.org" "~/Dropbox/Notes/CHN.org")))
#+end_src

** Org Babel
Configure Babel for use with Python
#+begin_src emacs-lisp
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src

** Auto bulleted lists
Use more normal behavior for lists in org mode
#+begin_src emacs-lisp
  (use-package org-autolist
    :ensure t
    :hook (org-mode . org-autolist-mode))
#+end_src

** Displaying inline images
Display images inline in org mode using the path to the file in double brackets: [[~/path/to/file]]
Set image width with the following properties:
1. #+ATTR_ORG: :width 100
2. #+ATTR_HTML: width="100px"
We change the variable org-image-actual-width to 'nil' to allow modifying the width of images displayed inline within org mode.
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

** HTMLize
We install this package so org-mode will export HTML files with syntax highlighting within code blocks.
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

* News and word processing tasks
** google translate
   #+begin_src emacs-lisp

     (use-package google-translate
       :ensure t
       :init
       (require 'google-translate)

       :functions (my-google-translate-at-point google-translate--search-tkk)
       :custom
       (google-translate-backend-method 'curl)
       (google-translate-default-source-language "pl")
       (google-translate-default-target-language "en")
       :config
       (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
       (defun my-google-translate-at-point()
	 "reverse translate if prefix"
	 (interactive)
	 (if current-prefix-arg
	     (google-translate-at-point)
	   (google-translate-at-point-reverse)))
       :bind
       ("C-c t". google-translate-at-point)
       ("C-c r". google-translate-at-point-reverse))
   #+end_src
** elfeed
   Read RSS using elfeed.
   #+begin_src emacs-lisp
     (use-package elfeed
       :ensure t
       :config
       (setq elfeed-feeds
	     '(
	       ;;programming
	       ("https://www.reddit.com/r/emacs.rss" emacs)
	       ;;news
	       ("http://feeds.bbci.co.uk/news/world/rss.xml" bbc)
	       ("http://www.npr.org/rss/rss.php?id=1004" npr)
	       ;;po polsku
	       ("https://www.polsatnews.pl/rss/polska.xml" polsat)
	       ))
       (setq-default elfeed-search-filter "@2-days-ago +unread")  
       (setq-default elfeed-search-title-max-width 100)           
       (setq-default elfeed-search-title-min-width 100))
   #+end_src
** read pubs
   #+begin_src emacs-lisp
     (use-package nov
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
   #+end_src
** avy
   #+begin_src emacs-lisp 
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char-timer))
     ;;make avy slightly snappier
     (defcustom avy-timeout-seconds 0.3
       "How many seconds to wait for the second char."
       :type 'float)
   #+end_src
** switch-window
   Better window switching.
   #+begin_src emacs-lisp
     (use-package switch-window
       :ensure t
       :config
	 (setq switch-window-input-style 'minibuffer)
	 (setq switch-window-increase 4)
	 (setq switch-window-threshold 2)
	 (setq switch-window-shortcut-style 'qwerty)
	 (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
       :bind
	 ([remap other-window] . switch-window))
   #+end_src
** hungry-delete
   Hungry delete whitespace
   #+begin_src emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config (global-hungry-delete-mode))
   #+end_src
** sudo-edit
   Edit 
   #+begin_src emacs-lisp
     (use-package sudo-edit
       :ensure t
       )
   #+end_src
** olivetti
   Nice, centered mode for reading text.
   #+begin_src emacs-lisp
     (use-package olivetti
       :ensure t
       )
     (add-hook 'olivetti-mode-hook 'my-buffer-face-mode-serif)
   #+end_src
* Buffers
** enable ibuffer
   #+begin_src emacs-lisp
     ; (global-set-key (kbd "C-x b") 'ibuffer)
   #+end_src
   
* Custom functions
** config edit/reload
*** edit
   #+begin_src emacs-lisp
     (defun config-visit()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
*** reload
    #+begin_src emacs-lisp
      (defun config-reload ()
	(interactive)
	(org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
      (global-set-key (kbd "C-c C-r") 'config-reload)
    #+end_src
** Yank whole line
   #+begin_src emacs-lisp
     (defun copy-whole-line()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol)))))
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src
   
** Insert elisp in org mode
   #+begin_src emacs-lisp
     (fset 'insertelisporg
	(kmacro-lambda-form [?< ?\C-d ?s tab ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p ?\C-n ?\C-c ?\'] 0 "%d"))
     (global-set-key (kbd "<f8>") 'insertelisporg)
   #+end_src   
* Diary
** Diary directory
  Set a different directory for the diary file.
  #+begin_src emacs-lisp
    (setq diary-file "~/Dropbox/diaryfile.org")
  #+end_src
** Org journal
Use org journal for day-to-day journal entries.
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir "~/Dropbox/org/journal/"
	  org-journal-date-format "%A, %d %B %Y"))
#+end_src
* Word processing
** Flyspell configuration
   Spell-checking with flyspell. Enable for all text modes.
   #+begin_src emacs-lisp
     (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))
     (eval-after-load "flyspell"
       '(progn
	  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
	  (define-key flyspell-mouse-map [mouse-3] #'undefined)))
   #+end_src

** writeroom mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t)
  (add-hook 'writeroom-mode-enable-hook 'my-buffer-face-mode-serif)
  (add-hook 'writeroom-mode-disable-hook 'my-buffer-face-mode-sans)
#+end_src
** pdf tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+end_src
* Wrap Region
Wrap selection automatically with a quote, parenthesis, curly brackets.
#+begin_src emacs-lisp
  (use-package wrap-region
    :ensure t
    :config
    (wrap-region-mode t))
#+end_src
* Change a word with visual feedback
One of the nice features I've seen in non-Emacs editors is the ability to change variables with visual feedback.
Activate with C-;
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t)
#+end_src
* Theme
** Modus themes
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-Iosvkem t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
** Set font
#+begin_src emacs-lisp
  (when (member "Source Code Pro" (font-family-list))
    (set-frame-font "Source Code Pro-16" t t))
  (set-face-attribute 'default nil :height 200)
#+end_src

* IDE Features
** eglot
Minimal IDE-like features for emacs.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src
** Disable python interpreter warning
#+begin_src emacs-lisp
  (setq python-shell-completion-native-disabled-interpreters '("python"))
#+end_src
** vterm
Let's use a good terminal emulator in emacs!
#+begin_src emacs-lisp
    (use-package vterm
      :ensure t)
#+end_src
** python-venv
#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :ensure t
    :hook ((python-mode . pyvenv-auto-run)))
#+end_src

** evil-mode
#+begin_src emacs-lisp
  ;;; Vim Bindings
  (use-package evil
    :ensure t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu))

   ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))

  ;; emulate the brilliant vim surround plugin
  (use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

** lsp-pyright
For all our python needs
#+begin_src emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;; 			  (require 'lsp-pyright)
  ;; 			  (lsp))))  ; or lsp-deferred

#+end_src

** treesitter
Better syntax highlighting with tree-sitter.
#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :ensure t)

  (use-package tree-sitter
    :ensure t)

  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** Enable wrap-region by default
Allows us to surround text with e.g. quotation marks.
#+begin_src emacs-lisp
  (wrap-region-mode t)
#+end_src
** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)

  ;; We need to install snippets separately
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t)
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** Multiple Cursors
   Select multiple instances of the same selection. Super useful for replacing variables.
   #+begin_src emacs-lisp
     (use-package multiple-cursors
      :ensure t
      :bind ("C-c q" . 'mark-next-like-this))
#+end_src
** undo tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
  ;; Prevent undo tree files from polluting your git repo
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

** CSV mode
   #+begin_src emacs-lisp
     (use-package csv-mode
       :ensure t)
   #+end_src
** Flycheck
   Improved syntax checking
   #+begin_src emacs-lisp
	  (use-package flycheck
	    :ensure t
	  )
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** expand-region
   Expand your selection by region with C-q! 
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-." . er/expand-region))
   #+end_src
** magit
   Git management.
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src
** Support for markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "pandoc"))
#+end_src
** god-mode
#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :init (global-set-key (kbd "<escape>") #'god-local-mode))
  ;;(god-mode)
#+end_src
** Astro support
Use emacs with astro.
#+begin_src emacs-lisp
  ;; WEB MODE
  (use-package web-mode
    :ensure t)

  ;; ASTRO
  (define-derived-mode astro-mode web-mode "astro")
  (setq auto-mode-alist
	(append '((".*\\.astro\\'" . astro-mode))
		auto-mode-alist))

  ;; Hook up to eglot
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
		 '(astro-mode . ("astro-ls" "--stdio"
				 :initializationOptions
				 (:typescript (:tsdk "./node_modules/typescript/lib")))))
    :init
    ;; auto start eglot for astro-mode
    (add-hook 'astro-mode-hook 'eglot-ensure))
  ;; (setq auto-mode-alist
  ;;     (append '((".*\\.astro\\'" . js-jsx-mode))
  ;; 	auto-mode-alist))
#+end_src
* Completion: ivy/counsel/swiper
#+begin_src emacs-lisp
  (use-package counsel
      :ensure t
      :bind
      (("M-y" . 'counsel-yank-pop)))
  (ivy-mode)					
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c s") 'counsel-rg)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-c o") 'counsel-outline)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
** company
   Company mode is an extension that allows for autocompletion.
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+end_src
*** company quick-help mode
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :init
       (company-quickhelp-mode))
   #+end_src
** IDO
*** Enable IDO
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+end_src
*** id-vertical
    #+begin_src emacs-lisp
      (use-package ido-vertical-mode
	:ensure t
	:init
	(ido-vertical-mode 1))
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+end_src

* hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
  (load "~/.emacs.d/hydras.el")
#+end_src

* Remote access over TRAMP
To ensure a faster experience, disable version control over TRAMP:
#+begin_src emacs-lisp
  (setq vc-ignore-dir-regexp
		       (format "\\(%s\\)\\|\\(%s\\)"
			       vc-ignore-dir-regexp
			       tramp-file-name-regexp))
#+end_src
