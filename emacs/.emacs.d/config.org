* Terminal
** Setting default shell: ZSH
Set the default shell to zsh. Make ansi-term stop asking to confirm shell.
   #+begin_src emacs-lisp
     (defvar my-term-shell "/bin/zsh")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-term-shell)))
     (ad-activate 'ansi-term)
     (global-set-key (kbd "<M-return>") 'ansi-term)
   #+end_src
** vterm
   Improved terminal emulation with vterm.
   #+begin_src emacs-lisp
     (use-package vterm
	 :ensure t)
   #+end_src
* Aliases
** Yes/Or/No
   Simple y/or/n substiution for yes/or/no prompts
   #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
* Visual and quality of life improvements
** No toolbar/menubar/scrollbar
   #+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
   #+end_src
** Autorefresh dired
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'auto-revert-mode)
   #+end_src
** Line numbers
   #+begin_src emacs-lisp
     (global-linum-mode t)
   #+end_src
** Display the time
   #+begin_src emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+end_src
** Inhibit default splashcreen
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src

** Logical scrolling
   More intuitive scrolling behavior when using C+n
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src
** Turn off the bell
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** Highlight current line
   #+begin_src emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+end_src
** Prettify symbols
   #+begin_src emacs-lisp
     (when window-system(global-prettify-symbols-mode t))
   #+end_src
** Window-splitting
   Custom function for following split windows
   #+begin_src emacs-lisp
     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+end_src
** Subword navigation
   Navigate to first uppercase within words for e.g. camelcase words
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** electric parentheses
   auto-complete parentheses
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
				    (?\{ . ?\})
				    (?\( . ?\))
				    (?\[ . ?\])
				    (?\" . ?\")
				    ))
     (electric-pair-mode t)
   #+end_src
** Vim CIW substitute
   Mimic the beloved CIW command with C-c w w
   #+begin_src emacs-lisp
     (defun kill-whole-word()
       (interactive)
       (backward-word)
       (kill-word 1))
     (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+end_src
** Show lines and columns
   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+end_src
** Spacemacs modeline
   #+begin_src emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (setq powerline-default-separator (quote arrow))
       (spaceline-spacemacs-theme))
   #+end_src
** diminish
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :config       (diminish 'hungry-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       (diminish 'subword-mode))
   #+end_src
** Set global font-size
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 165)
   #+end_src
** Line wrapping and word breaking
   #+begin_src emacs-lisp
     (setq org-startup-truncated nil)
   #+end_src
** Auto-dark/light theme
   Note this will only work with Emacs plus. Detect MacOS dark/light status and apply appropriate theme.
   #+begin_src emacs-lisp
     (use-package auto-dark
       :ensure t
       :config
       (require 'auto-dark))
   #+end_src
** Mac-specific setings
   Set modifier key.
   #+begin_src emacs-lisp
     (when (eq system-type 'darwin)
       (setq mac-right-option-modifier 'none))
   #+end_src
** EWW tls fix
   #+begin_src emacs-lisp
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   #+end_src
* Email with mu4e
  #+begin_src emacs-lisp
    ;; load mu4e from the installation path.
    ;; yours might differ check with the Emacs installation
    (use-package mu4e
      :load-path  "/usr/local/share/emacs/site-lisp/mu/mu4e/")
    ;; for sending mails
    (require 'smtpmail)

    ;; we installed this with homebrew
    (setq mu4e-mu-binary (executable-find "mu"))

    ;; this is the directory we created before:
    (setq mu4e-maildir "~/.maildir")

    ;; this command is called to sync imap servers:
    (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
    ;; how often to call it in seconds:
    (setq mu4e-update-interval 300)

    ;; save attachment to desktop by default
    ;; or another choice of yours:
    (setq mu4e-attachment-dir "~/Desktop")

    ;; rename files when moving - needed for mbsync:
    (setq mu4e-change-filenames-when-moving t)

    ;; list of your email adresses:
    (setq mu4e-user-mail-address-list '("nhaddal@protonmail.com"))

    (setq mu4e-contexts
	  `(,(make-mu4e-context
	      :name "protonmail"
	      :enter-func
	      (lambda () (mu4e-message "Enter nhaddal@protonmail.com context"))
	      :leave-func
	      (lambda () (mu4e-message "Leave nhaddal@protonmail.com context"))
	      :match-func
	      (lambda (msg)
		(when msg
		  (mu4e-message-contact-field-matches msg
						      :to "nhaddal@protonmail.com")))
	      :vars '((user-mail-address . "nhaddal@protonmail.com" )
		      (user-full-name . "Nicolai Haddal")
		      (mu4e-drafts-folder . "/protonmail/Drafts")
		      (mu4e-refile-folder . "/protonmail/Archive")
		      (mu4e-sent-folder . "/protonmail/Sent Messages")
		      (mu4e-trash-folder . "/protonmail/Deleted Messages")))))

    ;; Send mail
    (setq message-send-mail-function 'smtpmail-send-it
	    smtpmail-auth-credentials "~/.authinfo"
	    smtpmail-smtp-server "127.0.0.1"
	    smtpmail-smtp-service 1025)
    (setq mu4e-context-policy 'pick-first) ;; start with the first (default) context;
    (setq mu4e-compose-context-policy 'ask) ;; ask for context if no context matches;
    ;; don't keep message compose buffers around after sending:
    (setq message-kill-buffer-on-exit t)

    ;; send function:
    (setq send-mail-function 'sendmail-send-it
	  message-send-mail-function 'sendmail-send-it)

    ;; send program:
    ;; this is exeranal. remember we installed it before.
    (setq sendmail-program (executable-find "msmtp"))

    ;; select the right sender email from the context.
    (setq message-sendmail-envelope-from 'header)

    ;; chose from account before sending
    ;; this is a custom function that works for me.
    ;; well I stole it somewhere long ago.
    ;; I suggest using it to make matters easy
    ;; of course adjust the email adresses and account descriptions
    (defun timu/set-msmtp-account ()
      (if (message-mail-p)
	  (save-excursnion
	    (let*
		((from (save-restriction
			 (message-narrow-to-headers)
			 (message-fetch-field "from")))
		 (account
		  (cond
		   ((string-match "nhaddal@protonmail.com" from) "protonmail")
		   ((string-match "nhaddal@protonmail.com" from) "protonmail")
		   ((string-match "nhaddal@protonmail.com" from) "protonmail"))))
	      (setq message-sendmail-extra-arguments (list '"-a" account))))))

    (add-hook 'message-send-mail-hook 'timu/set-msmtp-account)

    ;; mu4e cc & bcc
    ;; this is custom as well
    (add-hook 'mu4e-compose-mode-hook
	      (defun timu/add-cc-and-bcc ()
		"My Function to automatically add Cc & Bcc: headers.
	This is in the mu4e compose mode."
		(save-excursion (message-add-header "Cc:\n"))
		(save-excursion (message-add-header "Bcc:\n"))))

    ;; mu4e address completion
    (add-hook 'mu4e-compose-mode-hook 'company-mode)

    ;; prefer plainest version of messages
    (with-eval-after-load "mm-decode"
	   (add-to-list 'mm-discouraged-alternatives "text/html")
	   (add-to-list 'mm-discouraged-alternatives "text/richtext"))
  #+end_src
* Org-mode
** Snippets expansion fix
I honestly don't know why I need this yet. But this fix will make snippet expansion work.
#+begin_src emacs-lisp
  (when (version<= "9.2" (org-version))
    (require 'org-tempo))
#+end_src
** Org-bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src
** Global keybindings
   Global keybindings for org-mode for org-store-link, agenda, and capture
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c l") #'org-store-link)
     (global-set-key (kbd "C-c a") #'org-agenda)
     (global-set-key (kbd "C-c c") #'org-capture)
   #+end_src
** Multi-state workflow
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO" "WAITING" "|" "DONE" "DELEGATED")))
   #+end_src
** Timestamps for closed todo items
   #+begin_src emacs-lisp
     (setq org-log-done 'time)
   #+end_src
** Set directory for org-capture
   #+begin_src emacs-lisp
     (setq org-directory "~/Dropbox/Notes")
     (setq org-default-notes-file (concat org-directory "/notes.org"))
   #+end_src
** Org-roam
   #+begin_src emacs-lisp
     (use-package org-roam
       :ensure t
       :config
       (setq org-roam-directory (file-truename "~/Dropbox/org-roam"))
       (org-roam-db-autosync-mode)
       :bind (("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n i" . org-roam-node-insert)
	      :map org-mode-map
	      ("C-M-i" . completion-at-point)))
   #+end_src
** Set timer sound
   #+begin_src emacs-lisp
     (setq org-clock-sound "~/Dropbox/yousuffer.wav")
   #+end_src

* Packages
** Visual improvements
*** Which-key
Which-key provides a helpful context menu whenever chords are engaged.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
*** Beacon
    Beacon shows you where your cursor is located when you switch to a buffer.
    #+begin_src emacs-lisp
      (use-package beacon
	:ensure t
	:init
	(beacon-mode 1))
    #+end_src
** zen mode
   #+begin_src emacs-lisp
     (use-package zen-mode
       :ensure t
       :init
       (require 'zen-mode))
   #+end_src
** google translate
   #+begin_src emacs-lisp

     (use-package google-translate
       :ensure t
       :init
       (require 'google-translate)

       :functions (my-google-translate-at-point google-translate--search-tkk)
       :custom
       (google-translate-backend-method 'curl)
       :config
       (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
       (defun my-google-translate-at-point()
	 "reverse translate if prefix"
	 (interactive)
	 (if current-prefix-arg
	     (google-translate-at-point)
	   (google-translate-at-point-reverse)))
       :bind
       ("C-c t". my-google-translate-at-point))
   #+end_src
** elfeed
   Read RSS using elfeed.
   #+begin_src emacs-lisp
     (use-package elfeed
       :ensure t
       :config
       (setq elfeed-feeds
	     '(
	       ;;programming
	       ("https://www.reddit.com/r/emacs.rss" emacs)
	       ;;news
	       ("http://feeds.bbci.co.uk/news/world/rss.xml" bbc)
	       ("http://www.npr.org/rss/rss.php?id=1004" npr)
	       ;;po polsku
	       ("https://www.polsatnews.pl/rss/polska.xml" polsat)
	       ))
       (setq-default elfeed-search-filter "@2-days-ago +unread")  
       (setq-default elfeed-search-title-max-width 100)           
       (setq-default elfeed-search-title-min-width 100))
   #+end_src
** CSV mode
   #+begin_src emacs-lisp
     (use-package csv-mode
       :ensure t)
   #+end_src
** read epubs
   #+begin_src emacs-lisp
     (use-package nov
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
   #+end_src
** pdf-tools
   Improved PDF reading experience.
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :ensure t)
   #+end_src
** pop-up kill ring
   A nice pop-up that lets you navigate through your killring history.
   #+begin_src emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("M-y" . popup-kill-ring))
   #+end_src
** Dashboard
   #+begin_src emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents . 5)
			       (agenda . 10)
			       (bookmarks . 5)
			       (projects . 5)))
       (setq dashboard-startup-banner "~/small_lain.png")
       (setq dashboard-banner-logo-title "Hello Nicolai"))
   #+end_src
** Dired
   Optimized configuration for file management in Emacs.
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :custom ((insert-directory-program "gls" dired-use-ls-dired t)
		(dired-listing-switches "-agho --group-directories-first"))
       :config
       )
   #+end_src
** IDO
*** Enable IDO
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+end_src
*** id-vertical
    #+begin_src emacs-lisp
      (use-package ido-vertical-mode
	:ensure t
	:init
	(ido-vertical-mode 1))
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+end_src
** vertico
   performant and minimalistic vertical completion UI
   #+begin_src emacs-lisp
     (use-package vertico
       :ensure t
       :init
       (vertico-mode))

     (use-package savehist
       :ensure t
       :init
       (savehist-mode))
   #+end_src
** smex
    ido-like behavior for M-x. remembers your most frequently called commands.
    #+begin_src emacs-lisp
      (use-package smex
	:ensure t
	:init (smex-initialize)
	:bind
	("M-x" . smex))
    #+end_src
** avy
   #+begin_src emacs-lisp 
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char))
   #+end_src
** blacken
   PEP8 formatting for Python documents with Black.
   #+begin_src emacs-lisp
     (use-package blacken
       :ensure t)
   #+end_src
** rainbow
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init (add-hook 'prog-mode-hook 'rainbow-mode))
   #+end_src
** switch-window
   Better window switching.
   #+begin_src emacs-lisp
     (use-package switch-window
       :ensure t
       :config
	 (setq switch-window-input-style 'minibuffer)
	 (setq switch-window-increase 4)
	 (setq switch-window-threshold 2)
	 (setq switch-window-shortcut-style 'qwerty)
	 (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
       :bind
	 ([remap other-window] . switch-window))
   #+end_src
** elpy: developing in python
   I've opted to use the elpy package for now since tutorials are widely available, though I'm worried it does not seem to be actively maintained at the moment.
   #+begin_src emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))
   #+end_src
** Flycheck
   Improved syntax checking
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (when (require 'flycheck nil t)
       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
       (add-hook 'elpy-mode-hook 'flycheck-mode))
     )
   #+end_src
** hungry-delete
   Hungry delete whitespace
   #+begin_src emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config (global-hungry-delete-mode))
   #+end_src
** sudo-edit
   Edit 
   #+begin_src emacs-lisp
     (use-package sudo-edit
       :ensure t
       )
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t
       :if (display-graphic-p))

   #+end_src
** company
   Company mode is an extension that allows for autocompletion.
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+end_src
** company quick-help mode
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :init
       (company-quickhelp-mode))
   #+end_src
** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t)
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** swiper
   #+begin_src emacs-lisp
     (use-package swiper
       :ensure t
       :bind ("C-s" . swiper))
   #+end_src
** Multiple Cursors
   Select multiple instances of the same selection. Super useful for replacing variables.
   #+begin_src emacs-lisp
     (use-package multiple-cursors
      :ensure t
      :bind ("C-c q" . 'mark-next-like-this))
#+end_src
** expand-region
   Expand your selection by region with C-q! 
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-q" . er/expand-region))
   #+end_src
** magit
   Git management.
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src
** olivetti
   Nice, centered mode for reading text.
   #+begin_src emacs-lisp
     (use-package olivetti
       :ensure t
       )
   #+end_src
* Buffers
** enable ibuffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+end_src
   
* Custom functions
** config edit/reload
*** edit
   #+begin_src emacs-lisp
     (defun config-visit()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
*** reload
    #+begin_src emacs-lisp
      (defun config-reload ()
	(interactive)
	(org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
      (global-set-key (kbd "C-c r") 'config-reload)
    #+end_src
** Yank whole line
   #+begin_src emacs-lisp
     (defun copy-whole-line()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol)))))
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src
   
** Insert elisp in org mode
   #+begin_src emacs-lisp
     (fset 'insertelisporg
	(kmacro-lambda-form [?< ?\C-d ?s tab ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p ?\C-n ?\C-c ?\'] 0 "%d"))
     (global-set-key (kbd "<f8>") 'insertelisporg)
   #+end_src   
* Diary
  Set a different directory for the diary file.
  #+begin_src emacs-lisp
    (setq diary-file "~/Dropbox/diaryfile.org")
  #+end_src

* Word processing

** Flyspell configuration
   Spell-checking with flyspell. Enable for all text modes.
   #+begin_src emacs-lisp
     (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))
     (eval-after-load "flyspell"
       '(progn
	  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
	  (define-key flyspell-mouse-map [mouse-3] #'undefined)))
   #+end_src
